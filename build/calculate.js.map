{"version":3,"sources":["calculate.js"],"names":["calcItemPrice","bPrice","markup","quantity","console","log","green","red","blue","Math","round","parseBasePrice","basePrices","currItem","keys","Object","options","baseItems","map","filter","item","key","length","cartTotal","cart","reduce","subtotal"],"mappings":";;;;;;;AAAA;;AAEA,IAAMA,gBAAgB,SAAhBA,aAAgB,CAACC,MAAD,EAASC,MAAT,EAAiBC,QAAjB,EAA8B;AAClDC,UAAQC,GAAR,CAAY,wBAAZ;AACAD,UAAQC,GAAR,CAAY,cAAWJ,MAAX,SAAsBK,KAAlC;AACAF,UAAQC,GAAR,CAAY,cAAWH,MAAX,SAAsBK,GAAlC;AACAH,UAAQC,GAAR,CAAY,gBAAaF,QAAb,SAA0BK,IAAtC;AACA,SAAO,CAACP,SAASQ,KAAKC,KAAL,CAAWT,UAAUC,SAAS,GAAnB,CAAX,CAAV,IAAiDC,QAAxD;AACD,CAND;;AAQA,IAAMQ,iBAAiB,SAAjBA,cAAiB,CAACC,UAAD,EAAaC,QAAb,EAA0B;AAC/C,MAAMC,OAAOC,OAAOD,IAAP,CAAYD,SAASG,OAArB,CAAb;AACA,MAAIC,YAAYL,UAAhB;AACAE,OAAKI,GAAL,CAAS,eAAO;AACdD,gBAAYA,UAAUE,MAAV,CAAiB;AAAA,aAAQ,qBAAOC,KAAKJ,OAAL,CAAaK,GAAb,CAAP,EAA0BR,SAASQ,GAAnC,CAAR;AAAA,KAAjB,CAAZ;AACD,GAFD;AAGA,SAAQJ,UAAUK,MAAV,KAAqB,CAAtB,GACLtB,cAAciB,UAAU,CAAV,EAAa,YAAb,CAAd,EAA0CJ,SAAS,eAAT,CAA1C,EAAqEA,SAASV,QAA9E,CADK,GACqF,CAD5F;AAED,CARD;;AAUO,IAAMoB,gCAAY,SAAZA,SAAY,CAACC,IAAD,EAAOZ,UAAP,EAAsB;AAC7C,SAAOY,KAAKC,MAAL,CAAY,UAACC,QAAD,EAAWb,QAAX;AAAA,WAAwBa,WAAWf,eAAeC,UAAf,EAA2BC,QAA3B,CAAnC;AAAA,GAAZ,EACP,CADO,CAAP;AAED,CAHM","file":"calculate.js","sourcesContent":["import { equals } from './compare'\n\nconst calcItemPrice = (bPrice, markup, quantity) => {\n  console.log('Calculating a price...')\n  console.log(`bPrice: ${bPrice}\\n`.green);\n  console.log(`markup: ${markup}\\n`.red);\n  console.log(`quantity: ${quantity}\\n`.blue);\n  return (bPrice + Math.round(bPrice * (markup * .01))) * quantity;\n}\n\nconst parseBasePrice = (basePrices, currItem) => {\n  const keys = Object.keys(currItem.options);\n  let baseItems = basePrices\n  keys.map(key => {\n    baseItems = baseItems.filter(item => equals(item.options[key], currItem.key))\n  })\n  return (baseItems.length === 1) ? \n    calcItemPrice(baseItems[0]['base-price'], currItem['artist-markup'], currItem.quantity) : 0\n}\n\nexport const cartTotal = (cart, basePrices) => {\n  return cart.reduce((subtotal, currItem) => subtotal + parseBasePrice(basePrices, currItem),\n  0);\n}"],"sourceRoot":"/Users/andrewchen/code/Price-Calculator/src"}