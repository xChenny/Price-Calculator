{"version":3,"sources":["calculate.js"],"names":["calcItemPrice","bPrice","markup","quantity","console","log","green","red","blue","Math","round","parseBasePrice","basePrices","currItem","keys","Object","options","baseItems","filter","item","map","key","cyan","length","cartTotal","cart","reduce","subtotal"],"mappings":";;;;;;;AAAA;;AAEA,IAAMA,gBAAgB,SAAhBA,aAAgB,CAACC,MAAD,EAASC,MAAT,EAAiBC,QAAjB,EAA8B;AAClDC,UAAQC,GAAR,CAAY,wBAAZ;AACAD,UAAQC,GAAR,CAAY,cAAWJ,MAAX,SAAsBK,KAAlC;AACAF,UAAQC,GAAR,CAAY,cAAWH,MAAX,SAAsBK,GAAlC;AACAH,UAAQC,GAAR,CAAY,gBAAaF,QAAb,SAA0BK,IAAtC;AACA,SAAOP,SAASQ,KAAKC,KAAL,CAAWT,SAASC,MAAT,GAAkB,GAA7B,IAAoCC,QAApD;AACD,CAND;;AAQA,IAAMQ,iBAAiB,SAAjBA,cAAiB,CAACC,UAAD,EAAaC,QAAb,EAA0B;AAC/C,MAAMC,OAAOC,OAAOD,IAAP,CAAYD,SAASG,OAArB,CAAb;AACA,MAAIC,YAAYL,WAAWM,MAAX,CAAkB;AAAA,WAAQL,SAAS,cAAT,MAA6BM,KAAK,cAAL,CAArC;AAAA,GAAlB,CAAhB;AACAL,OAAKM,GAAL,CAAS,eAAO;AACdhB,YAAQC,GAAR,CAAY,iBAAZ;AACAD,YAAQC,GAAR,CAAYgB,MAAM,KAAKC,IAAvB;AACAlB,YAAQC,GAAR,CAAYY,SAAZ;AACAA,gBAAYA,UAAUC,MAAV,CAAiB;AAAA,aAAQ,qBAAOC,KAAKH,OAAL,CAAaK,GAAb,CAAP,EAA0BR,SAASG,OAAT,CAAiBK,GAAjB,CAA1B,CAAR;AAAA,KAAjB,CAAZ;AACAjB,YAAQC,GAAR,CAAYY,SAAZ;AACD,GAND;AAOA,SAAQA,UAAUM,MAAV,KAAqB,CAAtB,GACLvB,cAAciB,UAAU,CAAV,EAAa,YAAb,CAAd,EAA0CJ,SAAS,eAAT,CAA1C,EAAqEA,SAASV,QAA9E,CADK,GACqF,CAD5F;AAED,CAZD;;AAcO,IAAMqB,gCAAY,SAAZA,SAAY,CAACC,IAAD,EAAOb,UAAP,EAAsB;AAC7C,SAAOa,KAAKC,MAAL,CAAY,UAACC,QAAD,EAAWd,QAAX;AAAA,WAAwBc,WAAWhB,eAAeC,UAAf,EAA2BC,QAA3B,CAAnC;AAAA,GAAZ,EACP,CADO,CAAP;AAED,CAHM","file":"calculate.js","sourcesContent":["import { equals } from './compare'\n\nconst calcItemPrice = (bPrice, markup, quantity) => {\n  console.log('Calculating a price...')\n  console.log(`bPrice: ${bPrice}\\n`.green);\n  console.log(`markup: ${markup}\\n`.red);\n  console.log(`quantity: ${quantity}\\n`.blue);\n  return bPrice + Math.round(bPrice * markup * .01) * quantity;\n}\n\nconst parseBasePrice = (basePrices, currItem) => {\n  const keys = Object.keys(currItem.options);\n  let baseItems = basePrices.filter(item => currItem['product-type'] === item['product-type'])\n  keys.map(key => {\n    console.log('filtering via\\n')\n    console.log(key + '\\n'.cyan)\n    console.log(baseItems)\n    baseItems = baseItems.filter(item => equals(item.options[key], currItem.options[key]))\n    console.log(baseItems)\n  })\n  return (baseItems.length === 1) ? \n    calcItemPrice(baseItems[0]['base-price'], currItem['artist-markup'], currItem.quantity) : 0\n}\n\nexport const cartTotal = (cart, basePrices) => {\n  return cart.reduce((subtotal, currItem) => subtotal + parseBasePrice(basePrices, currItem),\n  0);\n}"],"sourceRoot":"/Users/andrewchen/code/Price-Calculator/src"}